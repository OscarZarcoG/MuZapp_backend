# Generated by Django 5.2 on 2025-08-27 19:54

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('AUDIO', '0001_initial'),
        ('CATERING', '0001_initial'),
        ('CLIENTS', '0001_initial'),
        ('CLIENTS_REQUESTS', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Indica si el registro se encuentra activo', verbose_name='Estado')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Fecha y hora de creación del registro', verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Fecha y hora de la ultima actualización del registro', verbose_name='Última actualización')),
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, help_text='Fecha y hora de borrado del registro', null=True, verbose_name='Fecha de borrado')),
                ('numero_contrato', models.CharField(help_text='Número único del contrato', max_length=50, unique=True)),
                ('estado_evento', models.CharField(choices=[('pending', 'Pendiente'), ('confirmed', 'Confirmado'), ('in_progress', 'En Progreso'), ('completed', 'Completado'), ('cancelled', 'Cancelado')], default='pending', help_text='Estado actual del evento', max_length=20)),
                ('titulo', models.CharField(help_text='Título descriptivo del evento', max_length=200)),
                ('tipo_evento', models.CharField(choices=[('birthday', 'Cumpleaños'), ('wedding', 'Boda'), ('quinceañera', 'Quinceañera'), ('baptism', 'Bautizo'), ('communion', 'Comunión'), ('graduation', 'Graduación'), ('anniversary', 'Aniversario'), ('corporate', 'Corporativo'), ('baby_shower', 'Baby Shower'), ('bridal_shower', 'Despedida de Soltera'), ('christmas', 'Navidad'), ('new_year', 'Año Nuevo'), ('other', 'Otro')], help_text='Tipo de evento a realizar', max_length=20)),
                ('nombre_festejado', models.CharField(blank=True, help_text='Nombre de la persona festejada (si aplica)', max_length=200)),
                ('notas', models.TextField(blank=True, help_text='Notas adicionales sobre el evento')),
                ('fecha_evento', models.DateField(help_text='Fecha del evento')),
                ('hora_inicio', models.TimeField(help_text='Hora de inicio del evento')),
                ('hora_final', models.TimeField(help_text='Hora de finalización del evento')),
                ('tiempo_total', models.PositiveIntegerField(blank=True, help_text='Duración total en minutos (calculado automáticamente)', null=True)),
                ('oportunidades_descanso', models.PositiveIntegerField(blank=True, help_text='Número de descansos programados', null=True, validators=[django.core.validators.MaxValueValidator(10)])),
                ('tiempo_descanso', models.PositiveIntegerField(blank=True, help_text='Duración de cada descanso en minutos', null=True, validators=[django.core.validators.MaxValueValidator(120)])),
                ('descripcion_descanso', models.TextField(blank=True, help_text='Descripción de los descansos')),
                ('nombre_lugar', models.CharField(help_text='Nombre del lugar del evento', max_length=200)),
                ('descripcion_lugar', models.TextField(blank=True, help_text='Descripción detallada del lugar')),
                ('google_maps_url', models.URLField(blank=True, help_text='URL de Google Maps del lugar')),
                ('fotos_lugar', models.ImageField(blank=True, help_text='Fotos del lugar del evento', null=True, upload_to='contratos/lugares/')),
                ('pago_total', models.DecimalField(decimal_places=2, help_text='Monto total del contrato', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('costo_hora', models.DecimalField(decimal_places=2, help_text='Costo por hora del servicio', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('pago_adelanto', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monto del adelanto recibido', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('pago_restante', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monto restante por cobrar (calculado automáticamente)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('porcentaje', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Porcentaje del adelanto sobre el total', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('costo_extra', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Costos adicionales', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('audiencia', models.PositiveIntegerField(help_text='Número estimado de personas en el evento', validators=[django.core.validators.MinValueValidator(1)])),
                ('catering', models.ForeignKey(blank=True, help_text='Servicio de catering asociado', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contratos', to='CATERING.catering')),
                ('cliente', models.ForeignKey(help_text='Cliente que contrata el servicio', on_delete=django.db.models.deletion.PROTECT, related_name='contratos', to='CLIENTS.client')),
                ('equipo_audio', models.ForeignKey(blank=True, help_text='Equipo de audio asignado', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contratos', to='AUDIO.audioequipment')),
                ('peticiones_cliente', models.ManyToManyField(blank=True, help_text='Peticiones musicales del cliente', related_name='contratos', to='CLIENTS_REQUESTS.clientrequest')),
            ],
            options={
                'verbose_name': 'Contrato',
                'verbose_name_plural': 'Contratos',
                'db_table': 'gigs_contract',
                'ordering': ['-fecha_evento', '-created_at'],
                'indexes': [models.Index(fields=['numero_contrato'], name='gigs_contra_numero__184544_idx'), models.Index(fields=['estado_evento'], name='gigs_contra_estado__d7190e_idx'), models.Index(fields=['fecha_evento'], name='gigs_contra_fecha_e_c805e1_idx'), models.Index(fields=['cliente'], name='gigs_contra_cliente_9485cd_idx'), models.Index(fields=['tipo_evento'], name='gigs_contra_tipo_ev_7953d7_idx'), models.Index(fields=['-fecha_evento', 'estado_evento'], name='gigs_contra_fecha_e_b1122c_idx')],
            },
        ),
    ]
